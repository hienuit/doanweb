from flask import Blueprint, request, jsonify, session,json
from app.models.history import History
from app import db

histories_blueprint = Blueprint('history', __name__)

@histories_blueprint.route("/save-history", methods=["POST"])
def save_history():
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"message": "Ch∆∞a ƒëƒÉng nh·∫≠p"}), 401

    data = request.get_json()
    
    # L·∫•y d·ªØ li·ªáu c≈© (ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c)
    activity_names = json.dumps(data.get("activityNames", []))
    days = data.get("days", 0)
    budget = data.get("budget", 0)
    destination = data.get("destination", "Kh√¥ng r√µ")
    
    # L·∫•y d·ªØ li·ªáu itinerary ƒë·∫ßy ƒë·ªß (m·ªõi)
    full_itinerary = data.get("fullItinerary", None)
    full_itinerary_json = None
    
    if full_itinerary:
        try:
            # ƒê·∫£m b·∫£o ƒë√¢y l√† JSON h·ª£p l·ªá
            full_itinerary_json = json.dumps(full_itinerary)
            print("üìù L∆∞u itinerary ƒë·∫ßy ƒë·ªß:", len(full_itinerary_json), "k√Ω t·ª±")
        except (TypeError, ValueError) as e:
            print("‚ùå L·ªói khi serialize itinerary:", str(e))
            full_itinerary_json = None

    history = History(
        user_id=user_id,
        activity_names=activity_names,
        days=days,
        total_cost=budget,
        destination=destination,
        full_itinerary_data=full_itinerary_json
    )
    db.session.add(history)
    db.session.commit()

    return jsonify({"message": "ƒê√£ l∆∞u l·ªãch s·ª≠ th√†nh c√¥ng!"}), 200

@histories_blueprint.route('/get-history', methods=['GET'])
def get_history():
    user_id = session.get('user_id')

    if not user_id:
        return jsonify({"message": "Ch∆∞a ƒëƒÉng nh·∫≠p"}), 401
    
    histories = History.query.filter_by(user_id=user_id).order_by(History.created_at.desc()).all()
    
    result = []
    for history in histories:
        try:
            activity_names = json.loads(history.activity_names)
        except (json.JSONDecodeError, TypeError):
            activity_names = []

        result.append({
            "id": history.id,
            "activity_names": activity_names,
            "days": history.days,
            "total_cost": history.total_cost,
            "destination": history.destination or "Kh√¥ng r√µ",
            "created_at": history.created_at.strftime('%d-%m-%Y'),
        })

    # print("result", result)

    return jsonify({"histories": result}), 200


@histories_blueprint.route('/delete-history', methods=['DELETE'])
def delete_history():
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"message": "Ch∆∞a ƒëƒÉng nh·∫≠p"}), 401

    try:
        History.query.filter_by(user_id=user_id).delete()
        db.session.commit()
        return jsonify({"message": "ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠!"}), 200
    except Exception as e:
        return jsonify({"message": "L·ªói khi x√≥a l·ªãch s·ª≠!", "error": str(e)}), 500

@histories_blueprint.route("/schedule-from-history/<int:history_id>")
def schedule_from_history(history_id):
    """Route ƒë·ªÉ hi·ªÉn th·ªã trang schedule t·ª´ l·ªãch s·ª≠ ƒë√£ l∆∞u"""
    from flask import render_template
    user_id = session.get("user_id")
    if not user_id:
        return "Ch∆∞a ƒëƒÉng nh·∫≠p", 401
    
    # Ki·ªÉm tra xem l·ªãch s·ª≠ hi·ªán t·∫°i c√≥ ph·∫£i c√≥ user ƒë√≥ kh√¥ng
    history = History.query.filter_by(id=history_id, user_id=user_id).first()
    if not history:
        return "Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠", 404
    
    return render_template('schedule.html')

@histories_blueprint.route("/get-history-detail/<int:history_id>", methods=["GET"])
def get_history_detail(history_id):
    """API ƒë·ªÉ l·∫•y chi ti·∫øt l·ªãch s·ª≠ v√† chuy·ªÉn ƒë·ªïi th√†nh format itinerary"""
    user_id = session.get("user_id")
    if not user_id:
        return jsonify({"message": "Ch∆∞a ƒëƒÉng nh·∫≠p"}), 401
    
    # L·∫•y l·ªãch s·ª≠ t·ª´ database
    history = History.query.filter_by(id=history_id, user_id=user_id).first()
    if not history:
        return jsonify({"message": "Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠"}), 404
    
    # ∆Øu ti√™n s·ª≠ d·ª•ng full_itinerary_data n·∫øu c√≥
    if history.full_itinerary_data:
        try:
            # Parse d·ªØ li·ªáu itinerary ƒë·∫ßy ƒë·ªß
            full_itinerary = json.loads(history.full_itinerary_data)
            print("‚úÖ T√¨m th·∫•y itinerary ƒë·∫ßy ƒë·ªß cho history ID:", history_id)
            
            # Th√™m flag ƒë·ªÉ bi·∫øt ƒë√¢y l√† t·ª´ l·ªãch s·ª≠
            full_itinerary["created_from_history"] = True
            full_itinerary["history_id"] = history.id
            
            return jsonify({
                "success": True,
                "itinerary": full_itinerary
            }), 200
            
        except (json.JSONDecodeError, TypeError) as e:
            print("‚ùå L·ªói parse full_itinerary_data:", str(e))
            # Fallback v·ªÅ c√°ch c≈©
    
    # Fallback: S·ª≠ d·ª•ng c√°ch reconstruct c≈© cho d·ªØ li·ªáu legacy
    print("‚ö†Ô∏è Kh√¥ng c√≥ full_itinerary_data, s·ª≠ d·ª•ng c√°ch reconstruct c≈©")
    try:
        activity_names = json.loads(history.activity_names)
    except (json.JSONDecodeError, TypeError):
        activity_names = []
    
    # T·∫°o l·∫°i c·∫•u tr√∫c itinerary t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u (c√°ch c≈©)
    reconstructed_itinerary = re_constructure(history, activity_names)
    
    return jsonify({
        "success": True,
        "itinerary": reconstructed_itinerary
    }), 200


def re_constructure(history, activity_names):
    """H√†m t√°i t·∫°o l·ªãch tr√¨nh t·ª´ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë√£ l∆∞u"""
    days = []
    total_cost = 0
    
    try:
        total_budget = float(str(history.total_cost).replace(',', ''))
    except (ValueError, TypeError):
        total_budget = 0
    
    # Chia ho·∫°t ƒë·ªông v√† ng√¢n s√°ch cho t·ª´ng ng√†y
    activities_per_day = len(activity_names) // history.days if history.days > 0 else 1
    budget_per_day = total_budget // history.days if history.days > 0 else total_budget
    
    for day_num in range(1, history.days + 1):
        # L·∫•y ho·∫°t ƒë·ªông cho ng√†y hi·ªán t·∫°i
        start_idx = (day_num - 1) * activities_per_day
        end_idx = start_idx + activities_per_day
        
        # ƒê·ªëi v·ªõi ng√†y cu·ªëi, l·∫•y t·∫•t c·∫£ ho·∫°t ƒë·ªông c√≤n l·∫°i
        if day_num == history.days:
            day_activities = activity_names[start_idx:]
        else:
            day_activities = activity_names[start_idx:end_idx]
        
        # T·∫°o schedule cho ng√†y
        schedule = []
        base_times = ["08:00", "10:00", "12:00", "14:00", "16:00", "18:00"]
        
        for i, activity in enumerate(day_activities):
            time_idx = i % len(base_times)
            activity_cost = budget_per_day / len(day_activities) if day_activities else 0
            
            schedule.append({
                "time": base_times[time_idx],
                "description": activity,
                "name": activity,
                "type": "activity",
                "cost": int(activity_cost),
                "location": history.destination or "Vi·ªát Nam"
            })
        
        # Th√™m b·ªØa ƒÉn n·∫øu c·∫ßn
        if len(schedule) > 0:
            schedule.insert(2, {
                "time": "12:00",
                "description": f"B·ªØa tr∆∞a t·∫°i {history.destination}",
                "name": "B·ªØa tr∆∞a",
                "type": "meal",
                "cost": int(budget_per_day * 0.2),  # 20% ng√¢n s√°ch cho ƒÉn u·ªëng
                "location": history.destination or "Vi·ªát Nam"
            })
        
        day_data = {
            "day": day_num,
            "schedule": schedule,
            "estimated_cost": int(budget_per_day),
            "activities": schedule  # Compatibility
        }
        
        days.append(day_data)
        total_cost += budget_per_day
    
    return {
        "destination": history.destination or "Vi·ªát Nam",
        "days": days,
        "total_cost": int(total_cost),
        "trip_duration": history.days,
        "created_from_history": True,  # ƒë√°nh d·∫•u ƒë∆∞·ª£c t·∫°o t·ª´ l·ªãch s·ª≠
        "history_id": history.id
    }
